/* tslint:disable */
/* eslint-disable */
/**
 * flop-strategy
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    BoardConnectType,
    BoardConnectTypeFromJSON,
    BoardConnectTypeToJSON,
    BoardPairType,
    BoardPairTypeFromJSON,
    BoardPairTypeToJSON,
    BoardSuitsType,
    BoardSuitsTypeFromJSON,
    BoardSuitsTypeToJSON,
    GetFlopSituationsParameterResponse,
    GetFlopSituationsParameterResponseFromJSON,
    GetFlopSituationsParameterResponseToJSON,
    HighCard,
    HighCardFromJSON,
    HighCardToJSON,
    PlayerPosition,
    PlayerPositionFromJSON,
    PlayerPositionToJSON,
    PotType,
    PotTypeFromJSON,
    PotTypeToJSON,
} from '../models';

export interface FlopStrategyApiGetFlopSituationsParameterRequest {
    heroPosition?: PlayerPosition;
    villainPosition?: PlayerPosition;
    potType?: PotType;
    highCard?: HighCard;
    boardPairType?: BoardPairType;
    boardSuitsType?: BoardSuitsType;
    boardConnectType?: BoardConnectType;
}

/**
 * 
 */
export class FlopStrategyApi extends runtime.BaseAPI {

    /**
     * Get parameter for flop situations
     */
    async getFlopSituationsParameterRaw(requestParameters: FlopStrategyApiGetFlopSituationsParameterRequest): Promise<runtime.ApiResponse<GetFlopSituationsParameterResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.heroPosition !== undefined) {
            queryParameters['hero-position'] = requestParameters.heroPosition;
        }

        if (requestParameters.villainPosition !== undefined) {
            queryParameters['villain-position'] = requestParameters.villainPosition;
        }

        if (requestParameters.potType !== undefined) {
            queryParameters['pot-type'] = requestParameters.potType;
        }

        if (requestParameters.highCard !== undefined) {
            queryParameters['high-card'] = requestParameters.highCard;
        }

        if (requestParameters.boardPairType !== undefined) {
            queryParameters['board-pair-type'] = requestParameters.boardPairType;
        }

        if (requestParameters.boardSuitsType !== undefined) {
            queryParameters['board-suits-type'] = requestParameters.boardSuitsType;
        }

        if (requestParameters.boardConnectType !== undefined) {
            queryParameters['board-connect-type'] = requestParameters.boardConnectType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/flop/situations/parameter`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetFlopSituationsParameterResponseFromJSON(jsonValue));
    }

    /**
     * Get parameter for flop situations
     */
    async getFlopSituationsParameter(requestParameters: FlopStrategyApiGetFlopSituationsParameterRequest): Promise<GetFlopSituationsParameterResponse> {
        const response = await this.getFlopSituationsParameterRaw(requestParameters);
        return await response.value();
    }

}
